<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Recorder</title>
    <style>
        video {
            width: 100%;
            max-width: 600px;
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <h1>Video Recorder</h1>
    <video id="video" autoplay playsinline></video>
    <button id="start-btn">Start Recording</button>
    <button id="stop-btn" disabled>Stop Recording</button>
    <h2>Recorded Video:</h2>
    <video id="recorded-video" controls></video>

    <script>
        const video = document.getElementById('video');
        const recordedVideo = document.getElementById('recorded-video');
        const startButton = document.getElementById('start-btn');
        const stopButton = document.getElementById('stop-btn');
        let mediaRecorder;
        let recordedChunks = [];

        // Access the camera and start the video stream
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                video.srcObject = stream;

                mediaRecorder = new MediaRecorder(stream);
                
                mediaRecorder.ondataavailable = event => {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    recordedVideo.src = URL.createObjectURL(blob);
                    recordedVideo.play();
                };
            })
            .catch(err => {
                console.error("Error accessing camera: " + err);
            });

        // Start recording
        startButton.addEventListener('click', () => {
            recordedChunks = []; // Reset chunks
            mediaRecorder.start();
            startButton.disabled = true;
            stopButton.disabled = false;
        });

        // Stop recording
        stopButton.addEventListener('click', () => {
            mediaRecorder.stop();
            startButton.disabled = false;
            stopButton.disabled = true;
        });
    </script>
</body>
</html>







JS Code





async function postToInstagram(videoBlob) {
    const accessToken = 'YOUR_ACCESS_TOKEN';
    
    // Step 1: Upload the video to Instagram
    const uploadUrl = 'https://graph-video.facebook.com/v12.0/YOUR_INSTAGRAM_ACCOUNT_ID/media';
    const formData = new FormData();
    formData.append('video', videoBlob, 'video.webm'); // Append the recorded video

    const uploadResponse = await fetch(uploadUrl, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${accessToken}`,
        },
        body: formData,
    });

    const uploadResult = await uploadResponse.json();

    if (uploadResult.id) {
        // Step 2: Publish the video
        const publishUrl = `https://graph.facebook.com/v12.0/YOUR_INSTAGRAM_ACCOUNT_ID/media_publish`;
        const publishResponse = await fetch(publishUrl, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
            },
            body: JSON.stringify({ creation_id: uploadResult.id }),
        });

        const publishResult = await publishResponse.json();
        console.log('Published video:', publishResult);
    } else {
        console.error('Error uploading video:', uploadResult);
    }
}
